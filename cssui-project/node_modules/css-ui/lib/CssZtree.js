module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 86);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file.
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate

    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 25:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//
//
//
//

/* harmony default export */ __webpack_exports__["a"] = ({
  name: "css-tree",
  props: {
    id: String,
    fixedSize: String,
    treeParams: Object,
    ifCheck: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    isMove: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    isCopy: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    }
  },

  data: function data() {
    return {
      treeObj: null,
      curNodeId: this.treeParams.initNodeId,
      newCount: 1, //这个属性是ztree添加节点的时候命名的依据（new node1、new node2）
      fristAsync: true,
      setting: {
        data: {
          simpleData: {
            enable: true
          }
        },
        check: {
          enable: this.ifCheck
        },
        callback: {
          onAsyncSuccess: this.zTreeOnAsyncSuccess, //用于捕获异步加载正常结束的事件回调函数
          onClick: this.clickTreeNode //用于捕获节点被点击的事件回调函数
        },
        async: {
          enable: true,
          url: this.treeParams.initDataUrl,
          autoParam: ["id=id", "parentId=pId"],
          type: this.treeParams.initMethodType
        },
        edit: {
          enable: true,
          drag: {
            autoExpandTrigger: true, //拖拽时父节点自动展开是否触发 onExpand 事件回调函数
            isCopy: this.isCopy, //拖拽时, 设置是否允许复制节点  默认值：true
            isMove: this.isMove, //拖拽时, 设置是否允许移动节点
            prev: this.canDrag, //设置是否允许移动到目标节点前面的操作
            next: this.canDrag, //设置是否允许移动到目标节点后面的操作
            inner: true, //设置是否允许成为目标节点的子节点
            borderMax: 20, //拖拽节点成为根节点时的 Tree 内边界范围 (单位：px)
            borderMin: -10, //拖拽节点成为根节点时的 Tree 外边界范围 (单位：px)
            minMoveSize: 5, //判定是否拖拽操作的最小位移值 (单位：px)
            maxShowNodeNum: 5 //拖拽多个兄弟节点时，浮动图层中显示的最大节点数  多余的节点用...代替
          },
          showRemoveBtn: false,
          showRenameBtn: false
        } //settting end
      } };
  },
  watch: {
    treeParams: {
      handler: function handler() {
        this.curNodeId = this.treeParams.initNodeId;
        this.init();
      },

      deep: true
    }
  },
  methods: {
    init: function init() {
      this.fristAsync = true;
      if (this.treeParams.data) {
        this.treeObj = $.fn.zTree.init($(this.$el), this.setting, this.treeParams.data);
        this.selectTreeNode();
      } else {
        //异步加载方式
        this.treeObj = $.fn.zTree.init($(this.$el), this.setting);
      }
    },
    //加载成功后设置当前（选中）节点
    selectTreeNode: function selectTreeNode() {
      if (!this.curNodeId) {
        //没有传递默认节点id，判断是否需要默认选中根节点
        if (this.treeParams.isClickRootNode) {
          var nodes = this.treeObj.getNodesByFilter(function (node) {
            return node.level == 0;
          });
          this.curNodeId = nodes[0].id;
        }
      }
      var node = this.treeObj.getNodeByParam("id", this.curNodeId);
      if (node) {
        this.treeObj.selectNode(node);
        this.$emit("selectNode", node);
      }
    },
    //点击树节点
    clickTreeNode: function clickTreeNode(e, treeId, treeNode) {
      this.curNodeId = treeNode.id;
      this.$emit("clickNode", treeNode);
      return treeNode;
    },
    zTreeOnAsyncSuccess: function zTreeOnAsyncSuccess(event, treeId, treeNode, msg) {
      if (this.fristAsync) {
        this.fristAsync = false;
        this.selectTreeNode();
      }
    },
    //添加树节点
    addFolder: function addFolder(info) {
      var node = this.treeObj.getNodeByParam("id", this.curNodeId);
      this.treeObj.addNodes(node, {
        id: info.uuid,
        pId: this.curNodeId,
        isParent: false,
        name: info.name
      });
    },
    //修改树节点
    updFolder: function updFolder(info) {
      var node = this.treeObj.getNodeByParam("id", info.uuid);
      node.name = info.name;
      this.treeObj.updateNode(node);
    },
    //删除树节点
    removeFolder: function removeFolder(ids) {
      var dels = ids;
      if (!Array.isArray(dels)) {
        dels = [ids];
      }
      if (dels.length > 0) {
        for (var i = 0; i < dels.length; i++) {
          var node = this.treeObj.getNodeByParam("id", dels[i]);
          this.treeObj.removeNode(node);
        }
      }
    },
    //保存（按顺序返回ids中间用@分隔）
    saveTree: function saveTree() {
      var nodes = this.treeObj.transformToArray(this.treeObj.getNodes());
      var str = "";
      for (var i = 0; i < nodes.length; i++) {
        //排除父节点
        if (nodes[i].id != "1") str += nodes[i].id + "@" + nodes[i].pId + "@";
      }
      return str;
    },
    //通过nodeId返回node
    getNodeByNodeId: function getNodeByNodeId(treeNodeId) {
      return this.treeObj.getNodeByParam("id", treeNodeId);
    },
    //移动节点触发方法
    canDrag: function canDrag(treeId, nodes, targetNode) {
      return true;
    }
  },
  mounted: function mounted() {
    this.init();
  },
  destroyed: function destroyed() {
    this.csstree.remove(this.id);
  }
});

/***/ }),

/***/ 86:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_CssZtree__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_tree_js__ = __webpack_require__(89);


__WEBPACK_IMPORTED_MODULE_0__src_CssZtree__["a" /* default */].install = function(Vue) {
  Vue.component(__WEBPACK_IMPORTED_MODULE_0__src_CssZtree__["a" /* default */].name, __WEBPACK_IMPORTED_MODULE_0__src_CssZtree__["a" /* default */]);
  Vue.prototype.csstree = __WEBPACK_IMPORTED_MODULE_1__src_tree_js__["a" /* $csstree */];
};
/* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_0__src_CssZtree__["a" /* default */]);

/***/ }),

/***/ 87:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_CssZtree_vue__ = __webpack_require__(25);
/* unused harmony namespace reexport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_24fd3482_hasScoped_false_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CssZtree_vue__ = __webpack_require__(88);
var disposed = false
var normalizeComponent = __webpack_require__(0)
/* script */


/* template */

/* template functional */
var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_CssZtree_vue__["a" /* default */],
  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_24fd3482_hasScoped_false_transformToRequire_video_src_poster_source_src_img_src_image_xlink_href_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CssZtree_vue__["a" /* default */],
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)
Component.options.__file = "src/components/cssui/CssZtree/src/CssZtree.vue"

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-24fd3482", Component.options)
  } else {
    hotAPI.reload("data-v-24fd3482", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

/* harmony default export */ __webpack_exports__["a"] = (Component.exports);


/***/ }),

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("ul", {
    staticClass: "ztree s-autoscroll",
    attrs: { id: _vm.id, fixedSize: _vm.fixedSize }
  })
}
var staticRenderFns = []
render._withStripped = true
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ __webpack_exports__["a"] = (esExports);
if (false) {
  module.hot.accept()
  if (module.hot.data) {
    require("vue-hot-reload-api")      .rerender("data-v-24fd3482", esExports)
  }
}

/***/ }),

/***/ 89:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function treemanager() {
    this._map = new Object();
  }
  
  treemanager.prototype.add = function (name, vueins) {
  
    this._map[name] = vueins;
  }
  treemanager.prototype.remove = function (name) {
    delete  this._map[name];
  }
  treemanager.prototype.find = function (name) {
    return this._map[name];
  }

  const  $csstree= new treemanager();
/* harmony export (immutable) */ __webpack_exports__["a"] = $csstree;

  

/***/ })

/******/ });